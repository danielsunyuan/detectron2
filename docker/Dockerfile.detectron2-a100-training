FROM nvidia/cuda:12.4.1-cudnn9-devel-ubuntu22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Update system and install essential packages
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-opencv \
    git \
    wget \
    curl \
    sudo \
    ninja-build \
    build-essential \
    cmake \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create symlink for python command
RUN ln -sf /usr/bin/python3 /usr/bin/python

# Create non-root user
ARG USER_ID=1000
RUN useradd -m --no-log-init --system --uid ${USER_ID} appuser -g sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

USER appuser
WORKDIR /home/appuser

# Update PATH for user installations
ENV PATH="/home/appuser/.local/bin:${PATH}"

# Upgrade pip to latest version
RUN python -m pip install --user --upgrade pip setuptools wheel

# Install PyTorch with CUDA 12.4 support (stable for training)
RUN pip install --user torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124

# Install additional dependencies
RUN pip install --user \
    tensorboard \
    opencv-python \
    onnx \
    numpy \
    Pillow \
    matplotlib \
    pycocotools \
    scipy \
    termcolor \
    yacs \
    tabulate \
    cloudpickle \
    omegaconf \
    hydra-core

# Install fvcore
RUN pip install --user 'git+https://github.com/facebookresearch/fvcore'

# Clone and install detectron2
RUN git clone https://github.com/facebookresearch/detectron2 detectron2_repo

# Set environment variables for CUDA compilation
ENV FORCE_CUDA="1"
# A100-optimized architecture (compute capability 8.0)
ARG TORCH_CUDA_ARCH_LIST="8.0"
ENV TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"

# Install detectron2 from source
WORKDIR /home/appuser/detectron2_repo
RUN pip install --user -e .

# Set model cache directory
ENV FVCORE_CACHE="/tmp"

# Verify installation
RUN python -c "import detectron2; print('Detectron2 version:', detectron2.__version__)"
RUN python -c "import torch; print('PyTorch version:', torch.__version__); print('CUDA available:', torch.cuda.is_available())"

# Set working directory
WORKDIR /home/appuser/detectron2_repo

# Example usage (commented out):
# To test the installation:
# docker run --gpus all -it your_image_name
# wget http://images.cocodataset.org/val2017/000000439715.jpg -O input.jpg
# python demo/demo.py \
#   --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml \
#   --input input.jpg --output outputs/ \
#   --opts MODEL.WEIGHTS detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl